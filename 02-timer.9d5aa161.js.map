{"mappings":"AAIA,MAAMA,EAAUC,SAASC,cAAc,oBACjCC,EAAQF,SAASC,cAAc,sBAC/BE,EAAWH,SAASC,cAAc,UAClCG,EAASJ,SAASC,cAAc,mBAChCI,EAAUL,SAASC,cAAc,oBACjCK,EAAQN,SAASC,cAAc,sBAC/BM,EAAQP,SAASC,cAAc,sBAErCC,EAAMM,UAAUC,IAAI,YACpB,IAAIC,EAAW,KA2Bf,SAASC,EAAIC,GACT,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAGrC,MAAMC,EAAU,CACZC,YAAY,EACZC,WAAW,EACXC,YAAa,IAAIC,KACjBC,gBAAiB,EACjBC,QAAQC,GACJC,QAAQC,IAAIF,EAAc,IAEvBA,EAAc,GAAKH,KAAKM,OACvBC,OAAOC,QAAQ,sCACfjB,EAAW,IAAIS,OAEfjB,EAAM0B,UAAW,EACjB1B,EAAMM,UAAUqB,OAAO,YACvBnB,EAAWY,EAAc,G,GAuCjC,MAAMQ,EAAQ,IAhClB,MAMIC,aACQC,KAAKC,WAGbD,KAAKC,UAAW,EAChBD,KAAKE,QAAUC,aAAY,KACvB,MAAMC,EAAcjB,KAAKM,MACnBY,EAAY3B,EAAW0B,EACvBE,EA9Dd,SAAmBC,GAEf,MACMC,EAASC,IACTC,EAAOF,KACPG,EAAa,GAAPD,EAWZ,MAAO,C,KARM/B,EAAIiC,KAAKC,MAAMN,EAAKI,I,MAEnBhC,EAAIiC,KAAKC,MAAMN,EAAMI,EAAOD,I,QAE1B/B,EAAIiC,KAAKC,MAAMN,EAAOI,EAAOD,EAAQF,I,QAErC7B,EAAIiC,KAAKC,MAAMN,EAAQI,EAAOD,EAAQF,EAZvC,M,CA4DQM,CAAUT,GAErB9B,EAAMwC,YAAcT,EAAWU,QAC/B1C,EAAMyC,YAAcT,EAAWW,QAC/B5C,EAAQ0C,YAAcT,EAAWY,MACjC9C,EAAO2C,YAAcT,EAAWa,KAC5Bd,GAAa,IACbL,KAAKoB,OACLjD,EAASkD,UAAY,gB,GAElC,K,CAGHC,YACIC,cAAcvB,KAAKE,Q,CA3BvBsB,cACIxB,KAAKC,UAAW,EAChBD,KAAKE,QAAU,KACfhC,EAAM0B,UAAW,C,GA6BrB6B,UAAU1D,EAASgB,GACnBb,EAAMwD,iBAAiB,SAAS,IAAM5B,EAAMC","sources":["src/js/02-timer.js"],"sourcesContent":["//import flatpickr from \"flatpickr\";\n//import 'flatpickr/dist/flatpickr.min.css';\n//import { Notify } from \"notiflix\";\n\nconst inputEl = document.querySelector('#datetime-picker');\nconst btnEl = document.querySelector('button[data-start]');\nconst timerDiv = document.querySelector('.timer');\nconst daysEl = document.querySelector('span[data-days]');\nconst hoursEl = document.querySelector('span[data-hours]');\nconst minEl = document.querySelector('span[data-minutes]');\nconst secEl = document.querySelector('span[data-seconds]');\n\nbtnEl.classList.add('disabled');\nlet userDate = null;\n\n\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = pad(Math.floor(ms / day));\n    // Remaining hours\n    const hours = pad(Math.floor((ms % day) / hour));\n    // Remaining minutes\n    const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n    // Remaining seconds\n    const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n\n    return { days, hours, minutes, seconds };\n}\n\n//   console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n//   console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n//   console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n}\n\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        console.log(selectedDates[0]);\n\n        if(selectedDates[0] < Date.now()) {\n            Notify.failure('Please choose a date in the future');\n            userDate = new Date();\n        } else { \n            btnEl.disabled = false;\n            btnEl.classList.remove('disabled');\n            userDate = selectedDates[0];\n        }\n    },\n};\n\n\n\nclass Timer  {\n    constructor() {\n        this.isActive = false;\n        this.timerId = null;\n        btnEl.disabled = true;\n    }\n    timerStart() {\n        if (this.isActive) {\n            return;\n        }\n    this.isActive = true;\n    this.timerId = setInterval(()=> {\n        const currentTime = Date.now();\n        const deltaTime = userDate - currentTime;\n        const components = convertMs(deltaTime);\n\n                secEl.textContent = components.seconds;\n                minEl.textContent = components.minutes;\n                hoursEl.textContent = components.hours;\n                daysEl.textContent = components.days;\n                if (deltaTime <= 0) {\n                    this.stop();\n                    timerDiv.innerHTML = \"Time is over!\";\n                } \n    }, 1000)\n\n    }\n    timerStop() {\n        clearInterval(this.timerId);\n    }\n}\n\n    const timer = new Timer();\n    flatpickr(inputEl, options);\n    btnEl.addEventListener('click', () => timer.timerStart());"],"names":["$40d383fb392a7037$var$inputEl","document","querySelector","$40d383fb392a7037$var$btnEl","$40d383fb392a7037$var$timerDiv","$40d383fb392a7037$var$daysEl","$40d383fb392a7037$var$hoursEl","$40d383fb392a7037$var$minEl","$40d383fb392a7037$var$secEl","classList","add","$40d383fb392a7037$var$userDate","$40d383fb392a7037$var$pad","value","String","padStart","$40d383fb392a7037$var$options","enableTime","time_24hr","defaultDate","Date","minuteIncrement","onClose","selectedDates","console","log","now","Notify","failure","disabled","remove","$40d383fb392a7037$var$timer","timerStart","this","isActive","timerId","setInterval","currentTime","deltaTime","components","ms","minute","second","hour","day","Math","floor","$40d383fb392a7037$var$convertMs","textContent","seconds","minutes","hours","days","stop","innerHTML","timerStop","clearInterval","constructor","flatpickr","addEventListener"],"version":3,"file":"02-timer.9d5aa161.js.map"}